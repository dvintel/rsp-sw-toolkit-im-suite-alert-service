{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "RFID Alert service provides the capabilities to monitor gateway status and send alerts. Gateway status is updated periodically based on events sent through Heartbeat listener from CS SDK and alerts are generated when heartbeats are missed.\nAnd also, alert events are processed and posted to the REST endpoint.\n\n__Configuration Values__\n\u003cblockquote\u003eRFID Alert service configuration is split between values set in a configuration file and those set as environment values in compose file. The configuration file is expected to be contained in a docker secret for production deployments, but can be on a docker volume for validation and development.\n\u003cblockquote\u003e\u003cb\u003eConfiguration file values\u003c/b\u003e\n\u003cblockquote\u003e•\u003cb\u003e serviceName\u003c/b\u003e - Runtime name of the service.\u003c/blockquote\u003e\n\u003cblockquote\u003e•\u003cb\u003e loggingLevel\u003c/b\u003e - Logging level to use: \"info\" (default) or \"debug\" (verbose).\u003c/blockquote\u003e\n\u003cblockquote\u003e•\u003cb\u003e notificationChanSize\u003c/b\u003e - Channel size of a go channel named as notificationChan.\u003c/blockquote\u003e\n\u003cblockquote\u003e•\u003cb\u003e port\u003c/b\u003e - Port to run the service's HTTP Server on.\u003c/blockquote\u003e\n\u003cblockquote\u003e•\u003cb\u003e contextSensing\u003c/b\u003e - Host and port number for the Context Broker.\u003c/blockquote\u003e\n\u003cblockquote\u003e•\u003cb\u003e watchdogSeconds\u003c/b\u003e - Time interval set to check the status of registered gateways\u003c/blockquote\u003e\n\u003cblockquote\u003e•\u003cb\u003e maxMissedHeartbeats\u003c/b\u003e - Maximum heart beats that can be missed before the gateway gets deregistered.\u003c/blockquote\u003e\n\u003cblockquote\u003e•\u003cb\u003e cloudConnectorURL\u003c/b\u003e - URL for Cloud-connector service.\u003c/blockquote\u003e\n\u003cblockquote\u003e•\u003cb\u003e cloudConnectorEndpoint\u003c/b\u003e - Endpoint for Cloud-connector service.\u003c/blockquote\u003e\n\u003cblockquote\u003e•\u003cb\u003e Destination\u003c/b\u003e - Endpoint URL for Cloud-connector to send notificaiton to.\u003c/blockquote\u003e\n\u003cblockquote\u003e•\u003cb\u003e secureMode\u003c/b\u003e - Boolean flag indicating if using secure connection to the Context Brokers.\u003c/blockquote\u003e\n\u003cblockquote\u003e•\u003cb\u003e skipCertVerify\u003c/b\u003e - Boolean flag indicating if secure connection to the Context Brokers should skip certificate validation.\u003c/blockquote\u003e\n\u003cblockquote\u003e•\u003cb\u003e telemetryEndpoint\u003c/b\u003e - URL of the telemetry service receiving the metrics from the service.\u003c/blockquote\u003e\n\u003cblockquote\u003e•\u003cb\u003e telemetryDataStoreName\u003c/b\u003e - Name of the data store in the telemetry service to store the metrics.\u003c/blockquote\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\u003cb\u003eCompose file environment variable values\u003c/b\u003e\n\u003cblockquote\u003e•\u003cb\u003e cloudConnectorURL\u003c/b\u003e - URL to send processed heart beat and alerts.\u003c/blockquote\u003e\n\u003cblockquote\u003e•\u003cb\u003e runtimeConfigPath\u003c/b\u003e - Path to the configuration file to use at runtime.\u003c/blockquote\u003e\n\u003cblockquote\u003e•\u003cb\u003e contextSensing\u003c/b\u003e - Host and port number for the Context Broker.\u003c/blockquote\u003e\n\u003c/blockquote\u003e\n\n\u003cpre\u003e\u003cb\u003eExample configuration file json\n\u0026#9{\n\u0026#9\u0026#9\"serviceName\": \"RRP - RFID Alert service\",\n\u0026#9\u0026#9\"loggingLevel\": \"debug\",\n\u0026#9\u0026#9\"notificationChanSize\": 100,\n\u0026#9\u0026#9\"port\": \"8080\",\n\u0026#9\u0026#9\"contextSensing\": \"127.0.0.1:8888\",\n\u0026#9\u0026#9\"watchdogSeconds\": 1,\n\u0026#9\u0026#9\"maxMissedHeartbeats\": 3,\n\u0026#9\u0026#9\"cloudConnectorURL\": \"http://127.0.0.1:8081\",\n\u0026#9\u0026#9\"cloudConnectorEndpoint\": \"/aws/invoke\",\n\u0026#9\u0026#9\"Destination\": \"https://test.com/call\",\n\u0026#9\u0026#9\"secureMode\": false,\n\u0026#9\u0026#9\"skipCertVerify\": false,\n\u0026#9\u0026#9\"telemetryEndpoint\": \"http://166.130.9.122:8000\",\n\u0026#9\u0026#9\"telemetryDataStoreName\" : \"Store105\",\n\u0026#9}\n\u003c/b\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003cb\u003eExample environment variables in compose file\n\u0026#9cloudConnectorURL: \"https://cloudconnector:5001\",\n\u0026#9runtimeConfigPath: \"/data/configs/rfid-alert.json\"\n\u0026#9contextSenisng: \"127.0.0.1:8888\",\n\u003c/b\u003e\u003c/pre\u003e\n\u003c/blockquote\u003e\n\n__Secrets__\nThe following values/files are passed to the service via Docker Secrets\n\u003cblockquote\u003e\n\u003cblockquote\u003e•\u003cb\u003e configuration.json\u003c/b\u003e - Configuration file referenced above\u003c/blockquote\u003e\n\u003c/blockquote\u003e\n\n__Known services this service depends on:__\n○ Context Sensing\n○ Cloud-connector\n\n__Known services that depend upon this service:__\n○ None",
    "title": "RFID Alert Service API",
    "contact": {
      "name": "RRP",
      "email": "rrp@intel.com"
    },
    "version": "0.0.1"
  },
  "host": "rfid-alert-service:8080",
  "basePath": "/",
  "paths": {
    "/": {
      "get": {
        "description": "Endpoint that is used to determine if the application is ready to take web requests, i.e is healthy",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "tags": [
          "default"
        ],
        "summary": "Healthcheck Endpoint",
        "operationId": "Healthcheck",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/rfid-alert/alertmessage": {
      "post": {
        "description": "Alert message for events should be in request body payload in JSON format.\u003cbr\u003e\u003cbr\u003e\n\nExample AlertMessage Input:\n```\n{\n\u0026#9\"application\":\"Inventory-service\",\n\u0026#9\"value\": {\n\u0026#9\u0026#9\"sent_on\":1531522680000,\n\u0026#9\u0026#9\"alert_description\":\"Deletion of system database tag collection is complete\",\n\u0026#9\u0026#9\"severity\":\"critical\",\n\u0026#9\u0026#9\"optional\":\"event alert related data\"\n\u0026#9}\n}\n```\n\n\n+ application  - the application sending the alert message\n+ sent_on  - the time that alert message is sent in millisecond epoch\n+ alert_description  - the detailed message for the alert\n+ severity  - the severity of the alert\n+ optional  - contains any alert related data or evidence and can be omitted\n\n\n\nResponse will be either Ok or error messages when posting to cloud connector fails.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http"
        ],
        "summary": "Send alert message for events and post the message to the cloud connector",
        "operationId": "sendAlertMessage",
        "responses": {
          "200": {
            "$ref": "#/responses/statusOk"
          },
          "400": {
            "$ref": "#/responses/schemaValidation"
          },
          "500": {
            "$ref": "#/responses/internalError"
          },
          "503": {
            "$ref": "#/responses/serviceUnavailable"
          }
        }
      }
    }
  },
  "definitions": {
    "AdvanceShippingNotice": {
      "description": "AdvanceShippingNotice is the model containing advance shipping item epcs",
      "type": "object",
      "properties": {
        "asnId": {
          "type": "string",
          "x-go-name": "AsnID"
        },
        "eventTime": {
          "type": "string",
          "x-go-name": "EventTime"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AdvanceShippingNoticeItem"
          },
          "x-go-name": "Items"
        },
        "siteId": {
          "type": "string",
          "x-go-name": "SiteID"
        }
      },
      "x-go-package": "github.impcloud.net/Responsive-Retail-Inventory/rfid-alert-service/app/models"
    },
    "AdvanceShippingNoticeItem": {
      "type": "object",
      "properties": {
        "itemEpcs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Epcs"
        },
        "itemGtin": {
          "type": "string",
          "x-go-name": "ProductID"
        },
        "itemId": {
          "type": "string",
          "x-go-name": "Sku"
        }
      },
      "x-go-package": "github.impcloud.net/Responsive-Retail-Inventory/rfid-alert-service/app/models"
    },
    "ErrReport": {
      "description": "ErrReport is used to wrap schema validation errors int json object",
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "errortype": {
          "type": "string",
          "x-go-name": "ErrorType"
        },
        "field": {
          "type": "string",
          "x-go-name": "Field"
        },
        "value": {
          "type": "object",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "github.impcloud.net/Responsive-Retail-Inventory/rfid-alert-service/app/routes/schemas"
    },
    "ProdData": {
      "description": "ProdData represents the product data schema in the database",
      "type": "object",
      "properties": {
        "productList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductMetadata"
          },
          "x-go-name": "ProductList"
        }
      },
      "x-go-package": "github.impcloud.net/Responsive-Retail-Inventory/rfid-alert-service/app/models"
    },
    "ProductID": {
      "description": "ProductID represents the ProductID object",
      "type": "object",
      "properties": {
        "productId": {
          "type": "string",
          "x-go-name": "ProductID"
        }
      },
      "x-go-package": "github.impcloud.net/Responsive-Retail-Inventory/rfid-alert-service/app/models"
    },
    "ProductMetadata": {
      "description": "ProductMetadata represents the ProductList schema attribute in the database",
      "type": "object",
      "properties": {
        "productId": {
          "type": "string",
          "x-go-name": "ProductID"
        }
      },
      "x-go-package": "github.impcloud.net/Responsive-Retail-Inventory/rfid-alert-service/app/models"
    },
    "SkuMappingResponse": {
      "description": "SkuMappingResponse is the model of the response from the mapping sku service\nwith the selection of only the product id",
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProdData"
          },
          "x-go-name": "ProdData"
        }
      },
      "x-go-package": "github.impcloud.net/Responsive-Retail-Inventory/rfid-alert-service/app/models"
    }
  },
  "responses": {
    "internalError": {
      "description": "JSONError is the response for errors that occur within the API.",
      "headers": {
        "error": {
          "type": "string"
        }
      }
    },
    "schemaValidation": {
      "description": "ErrorList provides a collection of errors for processing",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/ErrReport"
        }
      }
    },
    "serviceUnavailable": {
      "description": "serviceUnavailable"
    },
    "statusOk": {
      "description": "statusOk"
    }
  }
}